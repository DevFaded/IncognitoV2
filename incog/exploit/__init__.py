from rbx import RBX
from rbx.bridge import Bridge
from rbx.module_script import ModuleScript
from rbx.object_value import ObjectValue
from rbx.utils import Utils

from instances import Instances, load_instances

from time import sleep
from threading import Thread

rbx_process = RBX.process

class Exploit:
    bridge = Bridge()

    def __init__(self):
        try:
            load_instances(RBX.get_datamodel())
            rbx_process._set_window(RBX.window)
            self._is_injected = Instances.core_packages["Initialized"] is not None
        except:
            self._is_injected = False   

        self._init_script = Utils.build_initscript()

    def inject(self):
        if self._is_injected:
            print("Already injected.")
            return False
        
        script_context = Instances.script_context
        player_list_manager = Instances.player_list_manager
        jest_globals: ModuleScript = Instances.jest_globals
        lumberyak = Instances.lumberyak

        init_bytecode: bytes = Utils.to_embedded_code(self._init_script)

        if script_context.is_game:
            old_embedded_code = jest_globals.embedded_code

            jest_globals.embedded_code = init_bytecode
            lumberyak.embedded_code = init_bytecode

            player_list_manager.self = jest_globals
            rbx_process._close_window()

            sleep(0.015)
            player_list_manager.self = player_list_manager
            jest_globals.embedded_code = old_embedded_code
        else:
            lumberyak.embedded_code = init_bytecode

        return True
    
    def run_bridge(self):
        Thread(target=self.bridge.run, daemon=True).start()

        while True:
            try:
                if not RBX.is_roblox_open():
                    break
            except KeyboardInterrupt:
                print("Keyboard interrupt, closing bridge...")
                break

@Exploit.bridge.register_callback
def client_ready(data):
    load_instances(RBX.get_datamodel())

    if Instances.core_packages["Initialized"] is not None:
        script_context = Instances.script_context
        target_script = ModuleScript(ObjectValue(
            Instances.core_packages["Initialized"]).value)
        
        Exploit.bridge._requests_container = target_script["BridgeRequests"]
        target_extraspace = target_script.per_vm_state.node.first.next.lua_state.extra_space # real
        target_extraspace.identity = 8
        target_extraspace.capabilities = 0x600100000000003f

        script_context.set_maxcaps(0, 0x600100000000003f)
        script_context.set_allownonrbxscripts(True)

    return True

Exploit.bridge._callbacks_registry["client_ready"]({})